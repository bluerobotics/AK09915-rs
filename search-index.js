var searchIndex = new Map(JSON.parse('[\
["ak09915_rs",{"doc":"","t":"FPPPPPPPPPGPPPPPPPPPPGPGPPPPPPPPPONNNNNNNNNNNNNNNNNNNONNNNNONNNNNNNNNNNNNNNNNNNNNN","n":["Ak09915","CNTL2","CNTL3","Cont100Hz","Cont10Hz","Cont1Hz","Cont200Hz","Cont20Hz","Cont50Hz","DataNotReady","Error","HXH","HXL","HYH","HYL","HZH","HZL","I2C","I2CDIS","InvalidData","MagneticSensorOverflow","Mode","PowerDown","Register","ST1","ST2","SelfTest","Single","TMPS","TS1","TS2","WIA1","WIA2","address","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","check_data_ready","check_st2","check_st2_value","clone","clone_into","eq","fmt","from","from","from","from","i2c","init","into","into","into","into","mode","new","read","read_raw","read_raw_unchecked","read_register","reset","self_test","set_mode","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","write_register"],"q":[[0,"ak09915_rs"],[82,"core::result"],[83,"embedded_hal::blocking::i2c"],[84,"embedded_hal::blocking::i2c"],[85,"core::fmt"],[86,"core::fmt"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Check St2 register value directly","Checks the status of the ST2 register based on the …","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,18,18,9,9,9,9,9,9,3,0,18,18,18,18,18,18,3,18,3,3,0,9,0,18,18,9,9,18,18,18,18,18,1,18,1,9,3,18,1,9,3,1,1,1,9,9,3,3,18,1,9,3,1,1,18,1,9,3,1,1,1,1,1,1,1,1,1,9,18,1,9,3,18,1,9,3,18,1,9,3,1],"f":"``````````````````````````````````{ce{}{}}0000000{{{b{e}}}{{h{d{f{c}}}}}{}{{l{}{{j{c}}}}{n{}{{j{c}}}}}}0{A`{{h{d{f{c}}}}}{}}{AbAb}{{ce}d{}{}}{{{f{c}}{f{c}}}AdAf}{{{f{c}}Ah}AjAl}{cc{}}000`67777`{e{{b{e}}}{}{{l{}{{j{c}}}}{n{}{{j{c}}}}}}{{{b{e}}}{{h{{B`{AnAnAn}}{f{c}}}}}{}{{l{}{{j{c}}}}{n{}{{j{c}}}}}}{{{b{e}}}{{h{{B`{BbBbBb}}{f{c}}}}}{}{{l{}{{j{c}}}}{n{}{{j{c}}}}}}0{{{b{e}}Bd}{{h{A`{f{c}}}}}{}{{l{}{{j{c}}}}{n{}{{j{c}}}}}}:{{{b{e}}}{{h{Ad{f{c}}}}}{}{{l{}{{j{c}}}}{n{}{{j{c}}}}}}{{{b{e}}Ab}{{h{d{f{c}}}}}{}{{l{}{{j{c}}}}{n{}{{j{c}}}}}}={c{{h{e}}}{}{}}0000000{cBf{}}000{{{b{e}}BdA`}{{h{d{f{c}}}}}{}{{l{}{{j{c}}}}{n{}{{j{c}}}}}}","c":[],"p":[[5,"Ak09915",0],[1,"unit"],[6,"Error",0],[6,"Result",82],[17,"Error"],[10,"Write",83],[10,"WriteRead",83],[1,"u8"],[6,"Mode",0],[1,"bool"],[10,"PartialEq",84],[5,"Formatter",85],[8,"Result",85],[10,"Debug",85],[1,"f32"],[1,"tuple"],[1,"i16"],[6,"Register",0],[5,"TypeId",86]],"b":[]}],\
["embedded_hal",{"doc":"A Hardware Abstraction Layer (HAL) for embedded systems","t":"RKCCCCMMCMMCCMCCCCCCCCCKRRMMKKMMKRRRRRRRGKPIIKKKPKKKNNNMMNNNMNNNMMMMRKMMCKRRRGKKPKPNNNMNNNCMNNNCMKKPPPKGPFPKGTTPPPFPTTNNNNNNNNNNNNNNNMMNNNNNNNNNNNNNNNNMNNNNNMMNMNCMNNMNNNNNNNNNNNNNNNNKRRMMCCCCKMMFNNNNNNNNNNNNNRPPKGNNNNNNNNNMMNNNNEEEEEEEEEEEEEERRKKMMMNPPRKPPSSSSFGGNNNNNNNNNNNNNNNNNNOOMMNNNNNNNNNKKRKRMMM","n":["Duty","PwmPin","adc","blocking","can","digital","disable","enable","fmt","get_duty","get_max_duty","prelude","serial","set_duty","spi","timer","watchdog","can","delay","i2c","rng","serial","spi","Can","Error","Frame","receive","transmit","DelayMs","DelayUs","delay_ms","delay_us","AddressMode","Error","Error","Error","Error","Error","Error","Error","Operation","Read","Read","SevenBitAddress","TenBitAddress","Transactional","TransactionalIter","Write","Write","WriteIter","WriteIterRead","WriteRead","borrow","borrow_mut","eq","exec","exec_iter","fmt","from","into","read","try_from","try_into","type_id","write","write","write_iter_read","write_read","Error","Write","bflush","bwrite_all","write","Default","Error","Error","Error","Operation","Transactional","Transfer","Transfer","Write","Write","borrow","borrow_mut","eq","exec","fmt","from","into","transfer","transfer","try_from","try_into","type_id","write","write","Default","Default","Acknowledge","Bit","Crc","Error","ErrorKind","Extended","ExtendedId","Form","Frame","Id","MAX","MAX","Other","Overrun","Standard","StandardId","Stuff","ZERO","ZERO","as_raw","as_raw","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","cmp","data","dlc","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","hash","id","into","into","into","into","is_data_frame","is_extended","is_remote_frame","is_standard","kind","kind","nb","new","new","new","new_remote","new_unchecked","new_unchecked","partial_cmp","standard_id","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Can","Error","Frame","receive","transmit","v1","v1_compat","v2","v2_compat","OutputPin","set_high","set_low","OldOutputPin","borrow","borrow_mut","from","from","into","new","set_high","set_high","set_low","set_low","try_from","try_into","type_id","Error","High","Low","OutputPin","PinState","borrow","borrow_mut","clone","eq","fmt","from","from","into","not","set_high","set_low","set_state","try_from","try_into","type_id","_embedded_hal_PwmPin","_embedded_hal_blocking_delay_DelayMs","_embedded_hal_blocking_delay_DelayUs","_embedded_hal_blocking_i2c_Read","_embedded_hal_blocking_i2c_Write","_embedded_hal_blocking_i2c_WriteRead","_embedded_hal_blocking_serial_Write","_embedded_hal_blocking_spi_Transfer","_embedded_hal_blocking_spi_Write","_embedded_hal_digital_OutputPin","_embedded_hal_serial_Read","_embedded_hal_serial_Write","_embedded_hal_spi_FullDuplex","_embedded_hal_timer_CountDown","Error","Error","Read","Write","flush","read","write","write_str","CaptureOnFirstTransition","CaptureOnSecondTransition","Error","FullDuplex","IdleHigh","IdleLow","MODE_0","MODE_1","MODE_2","MODE_3","Mode","Phase","Polarity","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","eq","eq","eq","from","from","from","into","into","into","phase","polarity","read","send","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Cancel","CountDown","Error","Periodic","Time","cancel","start","wait"],"q":[[0,"embedded_hal"],[17,"embedded_hal::blocking"],[23,"embedded_hal::blocking::can"],[28,"embedded_hal::blocking::delay"],[32,"embedded_hal::blocking::i2c"],[68,"embedded_hal::blocking::serial"],[73,"embedded_hal::blocking::serial::write"],[74,"embedded_hal::blocking::spi"],[97,"embedded_hal::blocking::spi::transfer"],[98,"embedded_hal::blocking::spi::write"],[99,"embedded_hal::can"],[183,"embedded_hal::can::nb"],[188,"embedded_hal::digital"],[192,"embedded_hal::digital::v1"],[195,"embedded_hal::digital::v1_compat"],[209,"embedded_hal::digital::v2"],[229,"embedded_hal::prelude"],[243,"embedded_hal::serial"],[251,"embedded_hal::spi"],[295,"embedded_hal::timer"],[303,"core::result"],[304,"core::iter::traits::collect"],[305,"core::fmt"],[306,"core::fmt"],[307,"core::cmp"],[308,"core::fmt"],[309,"core::option"],[310,"core::convert"],[311,"nb"],[312,"void"]],"d":["Type for the <code>duty</code> methods","A single PWM channel / pin","Analog-digital conversion traits","Blocking API","Controller Area Network","Digital I/O","Disables a PWM <code>channel</code>","Enables a PWM <code>channel</code>","Implementation of <code>core::fmt::Write</code> for the HAL’s …","Returns the current duty cycle","Returns the maximum duty cycle value","The prelude is a collection of all the traits in this crate","Serial interface","Sets a new duty cycle","Serial Peripheral Interface","Timers","Traits for interactions with a processors watchdog timer.","Blocking CAN API","Delays","Blocking I2C API","Blocking hardware random number generator","Blocking serial API","Blocking SPI API","A blocking CAN interface that is able to transmit and …","Associated error type.","Associated frame type.","Blocks until a frame was received or an error occured.","Puts a frame in the transmit buffer. Blocks until space is …","Millisecond delay","Microsecond delay","Pauses execution for <code>ms</code> milliseconds","Pauses execution for <code>us</code> microseconds","Address mode (7-bit / 10-bit)","Error type","Error type","Error type","Error type","Error type","Error type","Error type","Transactional I2C operation.","Blocking read","Read data into the provided buffer","7-bit address mode type","10-bit address mode type","Transactional I2C interface.","Transactional I2C interface (iterator version).","Blocking write","Write data from the provided buffer","Blocking write (iterator version)","Blocking write (iterator version) + read","Blocking write + read","","","","Execute the provided operations on the I2C bus.","Execute the provided operations on the I2C bus (iterator …","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Reads enough bytes from slave with <code>address</code> to fill <code>buffer</code>","","","","Writes bytes to slave with address <code>address</code>","Writes bytes to slave with address <code>address</code>","Writes bytes to slave with address <code>address</code> and then reads …","Writes bytes to slave with address <code>address</code> and then reads …","The type of error that can occur when writing","Write half of a serial interface (blocking variant)","Block until the serial interface has sent all buffered …","Writes a slice, blocking until everything has been written","Blocking serial write","Marker trait to opt into default blocking write …","Error type","Error type","Associated error type","Operation for transactional SPI trait","Transactional trait allows multiple actions to be executed …","Blocking transfer","Write data out while reading data into the provided buffer","Blocking write","Write data from the provided buffer, discarding read data","","","","Execute the provided transactions","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Blocking transfer","Sends <code>words</code> to the slave. Returns the <code>words</code> received from …","","","","Blocking write","Sends <code>words</code> to the slave, ignoring all the incoming words","Default implementation of <code>blocking::spi::Transfer&lt;W&gt;</code> for …","Default implementation of <code>blocking::spi::Write&lt;W&gt;</code> for …","An ACK  error shall be detected by a transmitter whenever …","A bit error is detected at that bit time when the bit …","Calculated CRC sequence does not equal the received one.","CAN error","CAN error kind","Extended 29-bit Identifier (<code>0..=0x1FFF_FFFF</code>).","Extended 29-bit CAN Identifier (<code>0..=1FFF_FFFF</code>).","A form error shall be detected when a fixed-form bit field …","A CAN2.0 Frame","A CAN Identifier (standard or extended).","CAN ID <code>0x7FF</code>, the lowest priority.","CAN ID <code>0x1FFFFFFF</code>, the lowest priority.","A different error occurred. The original error may contain …","The peripheral receive buffer was overrun.","Standard 11-bit Identifier (<code>0..=0x7FF</code>).","Standard 11-bit CAN Identifier (<code>0..=0x7FF</code>).","A stuff error is detected at the bit time of the sixth …","CAN ID <code>0</code>, the highest priority.","CAN ID <code>0</code>, the highest priority.","Returns this CAN Identifier as a raw 16-bit integer.","Returns this CAN Identifier as a raw 32-bit integer.","","","","","","","","","","","","","","Returns the frame data (0..8 bytes in length).","Returns the data length code (DLC) which is in the range …","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the frame identifier.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if this frame is a data frame.","Returns true if this frame is a extended frame.","Returns true if this frame is a remote frame.","Returns true if this frame is a standard frame.","Convert error to a generic CAN error kind","","Non-blocking CAN API","Creates a new frame.","Tries to create a <code>StandardId</code> from a raw 16-bit integer.","Tries to create a <code>ExtendedId</code> from a raw 32-bit integer.","Creates a new remote frame (RTR bit set).","Creates a new <code>StandardId</code> without checking if it is inside …","Creates a new <code>ExtendedId</code> without checking if it is inside …","","Returns the Base ID part of this extended identifier.","","","","","","","","","","","","","A CAN interface that is able to transmit and receive …","Associated error type.","Associated frame type.","Returns a received frame if available.","Puts a frame in the transmit buffer to be sent on the bus.","Digital I/O","v1 compatibility wrappers","Digital I/O","v2 compatibility shims","Single digital push-pull output pin","Drives the pin high","Drives the pin low","Wrapper to allow fallible <code>v2::OutputPin</code> traits to be …","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Create a new OldOutputPin wrapper around a <code>v2::OutputPin</code>","","","","","","","","Error type","High pin state","Low pin state","Single digital push-pull output pin","Digital output pin state","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Drives the pin high","Drives the pin low","Drives the pin high or low depending on the provided value","","","","","","","","","","","","","","","","","","Read error","Write error","Read half of a serial interface","Write half of a serial interface","Ensures that none of the previously written words are …","Reads a single word from the serial interface","Writes a single word to the serial interface","","Data in “captured” on the first clock transition","Data in “captured” on the second clock transition","An enumeration of SPI errors","Full duplex (master mode)","Clock signal high when idle","Clock signal low when idle","Helper for CPOL = 0, CPHA = 0","Helper for CPOL = 0, CPHA = 1","Helper for CPOL = 1, CPHA = 0","Helper for CPOL = 1, CPHA = 1","SPI mode","Clock phase","Clock polarity","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Clock phase","Clock polarity","Reads the word stored in the shift register","Sends a word to the slave","","","","","","","","","","Trait for cancelable countdowns.","A count down timer","Error returned when a countdown can’t be canceled.","Marker trait that indicates that a timer is periodic","The unit of time used by this timer","Tries to cancel this countdown.","Starts a new count down","Non-blockingly “waits” until the count down finishes"],"i":[2,0,0,0,0,0,2,2,0,2,2,0,0,2,0,0,0,0,0,0,0,0,0,0,6,6,6,6,0,0,10,11,0,22,25,26,28,27,14,17,0,0,12,0,0,0,0,0,12,0,0,0,12,12,12,14,17,12,12,12,22,12,12,12,25,26,27,28,29,0,29,29,0,0,34,35,32,0,0,0,30,0,30,30,30,30,32,30,30,30,0,34,30,30,30,0,35,0,0,41,41,41,0,0,40,0,41,0,0,36,38,41,41,40,0,41,36,38,36,38,36,38,40,41,36,38,40,41,36,38,40,41,41,8,8,36,38,40,41,36,38,40,41,41,36,38,40,40,40,41,41,8,36,38,40,41,8,8,8,8,9,41,0,8,36,38,8,36,38,41,38,36,38,40,41,36,38,40,41,36,38,40,41,0,47,47,47,47,0,0,0,0,0,49,49,0,50,50,50,50,50,50,50,50,50,50,50,50,50,51,52,52,0,0,52,52,52,52,52,52,52,52,52,51,51,51,52,52,52,0,0,0,0,0,0,0,0,0,0,0,0,0,0,54,53,0,0,53,54,53,53,57,57,59,0,56,56,0,0,0,0,0,0,0,56,57,58,56,57,58,56,57,58,56,57,58,56,57,58,56,57,58,58,58,59,59,56,57,58,56,57,58,56,57,58,0,0,60,0,62,60,62,62],"f":"``````{{{d{}{{b{c}}}}}f{}}0`{{{d{}{{b{c}}}}}c{}}0``{{{d{}{{b{c}}}}c}f{}}````````````{{{l{}{{h{c}}{j{e}}}}}{{n{ce}}}A`Ab}{{{l{}{{h{c}}{j{e}}}}c}{{n{fe}}}A`Ab}``{{Adc}f{}}{{Afc}f{}}````````````````````{ce{}{}}0{{AhAh}Aj}{{{Al{}{{j{c}}}}e{An{Ah}}}{{n{fc}}}{}B`}{{{Bb{}{{j{c}}}}eg}{{n{fc}}}{}B`{{Bf{}{{Bd{Ah}}}}}}{{AhBh}Bj}{cc{}}5{{{Bl{}{{j{c}}}}e{An{Bn}}}{{n{fc}}}{}B`}{c{{n{e}}}{}{}}0{cC`{}}{{{Cb{}{{j{c}}}}e{An{Bn}}}{{n{fc}}}{}B`}{{{Cd{}{{j{c}}}}eg}{{n{fc}}}{}B`{{Bf{}{{Bd{Bn}}}}}}{{{Cf{}{{j{c}}}}eg{An{Bn}}}{{n{fc}}}{}B`{{Bf{}{{Bd{Bn}}}}}}{{{Ch{}{{j{c}}}}e{An{Bn}}{An{Bn}}}{{n{fc}}}{}B`}``{{{Cj{}{{j{c}}}}}{{n{fc}}}{}}{{{Cj{}{{j{c}}}}{An{e}}}{{n{fc}}}{}{}}```````````>>{{{Cl{c}}{Cl{c}}}AjCn}{{{D`{}{{j{c}}}}{An{{Cl{e}}}}}{{n{fc}}}{}{}}{{{Cl{c}}Bh}BjDb}<{ce{}{}}`{{{Dd{}{{j{c}}}}{An{e}}}{{n{{An{e}}c}}}{}{}}<<;`{{{Df{}{{j{c}}}}{An{e}}}{{n{fc}}}{}{}}`````````````````````{DhDj}{DlDn}44444444{DhDh}{DlDl}{E`E`}{EbEb}{{EbEb}Ed}{A`{{An{Bn}}}}{A`Ef}{{DhDh}Aj}{{DlDl}Aj}{{E`E`}Aj}{{EbEb}Aj}{{DhBh}Bj}{{DlBh}Bj}{{E`Bh}Bj}{{EbBh}Bj}0{cc{}}0{DlE`}{DhE`}22{{Ebc}fEh}{A`E`}{ce{}{}}000{A`Aj}000{AbEb}{EbEb}`{{c{An{Bn}}}{{Ej{A`}}}{{El{E`}}}}{Dj{{Ej{Dh}}}}{Dn{{Ej{Dl}}}}{{cEf}{{Ej{A`}}}{{El{E`}}}}{DjDh}{DnDl}{{EbEb}{{Ej{Ed}}}}{DlDh}{c{{n{e}}}{}{}}0000000{cC`{}}000```{{{En{}{{h{c}}{j{e}}}}}{{F`{ce}}}A`Ab}{{{En{}{{h{c}}{j{e}}}}c}{{F`{{Ej{c}}e}}}A`Ab}`````{Fbf}0`{ce{}{}}0{e{{Fd{e}}}Db{{Ff{}{{j{c}}}}}}{cc{}}21{c{{n{f}}}{}}{{{Fd{e}}}fDb{{Ff{}{{j{c}}}}}}10998`````44{FhFh}{{FhFh}Aj}{{FhBh}Bj}5{AjFh}8{Fhc{}}{{{Ff{}{{j{c}}}}}{{n{fc}}}{}}0{{{Ff{}{{j{c}}}}Fh}{{n{fc}}}{}}{c{{n{e}}}{}{}}0{cC`{}}``````````````````{{{Fj{}{{j{c}}}}}{{F`{fc}}}{}}{{{Fl{}{{j{c}}}}}{{F`{ec}}}{}{}}{{{Fj{}{{j{c}}}}e}{{F`{fc}}}{}{}}{{FjFn}Bj}`````````````{ce{}{}}00000{G`G`}{GbGb}{GdGd}{{G`G`}Aj}{{GbGb}Aj}{{GdGd}Aj}{cc{}}00777``{{{Gf{}{{j{c}}}}}{{F`{ec}}}{}{}}{{{Gf{}{{j{c}}}}e}{{F`{fc}}}{}{}}??????>>>`````{{{Gh{}{{j{c}}}}}{{n{fc}}}{}}{{{Gl{}{{Gj{c}}}}e}f{}{{El{c}}}}{{{Gl{}{{Gj{c}}}}}{{F`{fGn}}}{}}","c":[188,192,193,194],"p":[[17,"Duty"],[10,"PwmPin",0],[1,"unit"],[17,"Frame"],[17,"Error"],[10,"Can",23],[6,"Result",303],[10,"Frame",99],[10,"Error",99],[10,"DelayMs",28],[10,"DelayUs",28],[6,"Operation",32],[1,"bool"],[10,"Transactional",32],[1,"slice"],[10,"AddressMode",32],[10,"TransactionalIter",32],[17,"Item"],[10,"IntoIterator",304],[5,"Formatter",305],[8,"Result",305],[10,"Read",32],[1,"u8"],[5,"TypeId",306],[10,"Write",32],[10,"WriteIter",32],[10,"WriteIterRead",32],[10,"WriteRead",32],[10,"Write",68],[6,"Operation",74],[10,"PartialEq",307],[10,"Transactional",74],[10,"Debug",305],[10,"Transfer",74],[10,"Write",74],[5,"StandardId",99],[1,"u16"],[5,"ExtendedId",99],[1,"u32"],[6,"Id",99],[6,"ErrorKind",99],[6,"Ordering",307],[1,"usize"],[10,"Hasher",308],[6,"Option",309],[10,"Into",310],[10,"Can",183],[8,"Result",311],[10,"OutputPin",192],[5,"OldOutputPin",195],[10,"OutputPin",209],[6,"PinState",209],[10,"Write",243],[10,"Read",243],[1,"str"],[6,"Polarity",251],[6,"Phase",251],[5,"Mode",251],[10,"FullDuplex",251],[10,"Cancel",295],[17,"Time"],[10,"CountDown",295],[6,"Void",312]],"b":[[142,"impl-Display-for-ErrorKind"],[143,"impl-Debug-for-ErrorKind"],[146,"impl-From%3CExtendedId%3E-for-Id"],[147,"impl-From%3CStandardId%3E-for-Id"]]}],\
["void",{"doc":"Void","t":"KKGNNNNNNNNNNNNHMM","n":["ResultVoidErrExt","ResultVoidExt","Void","borrow","borrow_mut","clone","eq","fmt","fmt","from","into","partial_cmp","try_from","try_into","type_id","unreachable","void_unwrap","void_unwrap_err"],"q":[[0,"void"],[18,"core::fmt"],[19,"core::fmt"],[20,"core::option"],[21,"core::result"],[22,"core::any"]],"d":["Extensions to <code>Result&lt;Void, E&gt;</code>","Extensions to <code>Result&lt;T, Void&gt;</code>","The empty type for cases which can’t occur.","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","A safe version of <code>intrinsincs::unreachable</code>.","Get the value out of a wrapper.","Get the error out of a wrapper."],"i":[0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,10,11],"f":"```{ce{}{}}0{bb}{{bc}d{}}{{bf}h}0{cc{}}4{{bc}{{l{j}}}{}}{c{{n{e}}}{}{}}0{cA`{}}{bAb}{Adc{}}{Afc{}}","c":[],"p":[[6,"Void",0],[1,"bool"],[5,"Formatter",18],[8,"Result",18],[6,"Ordering",19],[6,"Option",20],[6,"Result",21],[5,"TypeId",22],[1,"never"],[10,"ResultVoidExt",0],[10,"ResultVoidErrExt",0]],"b":[[7,"impl-Debug-for-Void"],[8,"impl-Display-for-Void"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
