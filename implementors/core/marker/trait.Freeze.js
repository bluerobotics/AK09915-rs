(function() {var implementors = {
"ak09915_rs":[["impl Freeze for <a class=\"enum\" href=\"ak09915_rs/enum.Register.html\" title=\"enum ak09915_rs::Register\">Register</a>",1,["ak09915_rs::Register"]],["impl Freeze for <a class=\"enum\" href=\"ak09915_rs/enum.Mode.html\" title=\"enum ak09915_rs::Mode\">Mode</a>",1,["ak09915_rs::Mode"]],["impl&lt;E&gt; Freeze for <a class=\"enum\" href=\"ak09915_rs/enum.Error.html\" title=\"enum ak09915_rs::Error\">Error</a>&lt;E&gt;<span class=\"where fmt-newline\">where\n    E: Freeze,</span>",1,["ak09915_rs::Error"]],["impl&lt;I2C&gt; Freeze for <a class=\"struct\" href=\"ak09915_rs/struct.Ak09915.html\" title=\"struct ak09915_rs::Ak09915\">Ak09915</a>&lt;I2C&gt;<span class=\"where fmt-newline\">where\n    I2C: Freeze,</span>",1,["ak09915_rs::Ak09915"]]],
"embedded_hal":[["impl&lt;'a&gt; Freeze for <a class=\"enum\" href=\"embedded_hal/blocking/i2c/enum.Operation.html\" title=\"enum embedded_hal::blocking::i2c::Operation\">Operation</a>&lt;'a&gt;",1,["embedded_hal::blocking::i2c::Operation"]],["impl&lt;'a, W&gt; Freeze for <a class=\"enum\" href=\"embedded_hal/blocking/spi/enum.Operation.html\" title=\"enum embedded_hal::blocking::spi::Operation\">Operation</a>&lt;'a, W&gt;",1,["embedded_hal::blocking::spi::Operation"]],["impl Freeze for <a class=\"struct\" href=\"embedded_hal/can/struct.StandardId.html\" title=\"struct embedded_hal::can::StandardId\">StandardId</a>",1,["embedded_hal::can::id::StandardId"]],["impl Freeze for <a class=\"struct\" href=\"embedded_hal/can/struct.ExtendedId.html\" title=\"struct embedded_hal::can::ExtendedId\">ExtendedId</a>",1,["embedded_hal::can::id::ExtendedId"]],["impl Freeze for <a class=\"enum\" href=\"embedded_hal/can/enum.Id.html\" title=\"enum embedded_hal::can::Id\">Id</a>",1,["embedded_hal::can::id::Id"]],["impl Freeze for <a class=\"enum\" href=\"embedded_hal/can/enum.ErrorKind.html\" title=\"enum embedded_hal::can::ErrorKind\">ErrorKind</a>",1,["embedded_hal::can::ErrorKind"]],["impl Freeze for <a class=\"enum\" href=\"embedded_hal/digital/v2/enum.PinState.html\" title=\"enum embedded_hal::digital::v2::PinState\">PinState</a>",1,["embedded_hal::digital::v2::PinState"]],["impl&lt;T&gt; Freeze for <a class=\"struct\" href=\"embedded_hal/digital/v1_compat/struct.OldOutputPin.html\" title=\"struct embedded_hal::digital::v1_compat::OldOutputPin\">OldOutputPin</a>&lt;T&gt;<span class=\"where fmt-newline\">where\n    T: Freeze,</span>",1,["embedded_hal::digital::v1_compat::OldOutputPin"]],["impl Freeze for <a class=\"enum\" href=\"embedded_hal/spi/enum.Polarity.html\" title=\"enum embedded_hal::spi::Polarity\">Polarity</a>",1,["embedded_hal::spi::Polarity"]],["impl Freeze for <a class=\"enum\" href=\"embedded_hal/spi/enum.Phase.html\" title=\"enum embedded_hal::spi::Phase\">Phase</a>",1,["embedded_hal::spi::Phase"]],["impl Freeze for <a class=\"struct\" href=\"embedded_hal/spi/struct.Mode.html\" title=\"struct embedded_hal::spi::Mode\">Mode</a>",1,["embedded_hal::spi::Mode"]]],
"void":[["impl Freeze for <a class=\"enum\" href=\"void/enum.Void.html\" title=\"enum void::Void\">Void</a>",1,["void::Void"]]]
};if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()